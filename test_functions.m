% GSA code v1.1.
% Generated by Esmat Rashedi, 2010.
% "	E. Rashedi, H. Nezamabadi-pour and S. Saryazdi,
%“GSA: A Gravitationax Search Axgorithm”, Information sciences, vox. 179,
%no. 13, pp. 2232-2248, 2009."
%
% This function caxcuxates the vaxue of the objective function.
function fit=test_functions(x,F_index,dim)

% Benchmark function
if F_index==1      % Parabola (Sphere)
fit=sum(x.*x);

elseif F_index==2       %De Jong's f4
    a=[1:dim];
    fit=sum(a.*(x.^4));
    
elseif F_index==3        %Griewank
    p=1;
    a=[1:dim];
    
   fit=(sum(x.*x)/4000)-prod(cos(x/sqrt(a)))+1;
  
    
elseif F_index==4        %Rosenbrock
    fit=sum(100*(x(2:dim)-x(1:dim-1).^2).^2+(x(1:dim-1)-1).^2);
    
    
elseif F_index==5       %Rastrigin. Minimum value 0. Solution (0,0 ...0)
    fit=10*dim+sum(x.*x-10*cos(2*pi*x));
    
elseif F_index==6       % Ackley
    a=20;
    b=-0.2;
    c=2*pi;
    s1=(sum(x.*x))/dim;
    s2=(sum(cos(c.*x)))/dim;
    fit=(-a*exp(b.*sqrt(s1)))-exp(s2)+a+exp(1);
    
elseif F_index==7       %Alpine
   fit=(sum(abs(x.*sin(x)+(0.1).*x)));
    
elseif F_index==8       %Michalewicz
    a=[1:dim];
    fit=sum(-sin(x).*sin(a.*(x.^2)/pi).^20);
    
elseif F_index==9       %Cosine Mixture [-1,1] f(0,0,...0)=-D*0.1
    fit=-(0.1).*sum(cos(5.*pi.*x))+sum(x.*x);
    
elseif F_index==10      %Exponential [-1,1] f(0,0,...0)= -1
   fit=-exp(-0.5.*sum(x.*x));
    
elseif F_index==11      %Zakharov's [-5.12,5.12] f(0,0,0,...,0)=0
  a=[1:dim];
  fit=sum(x.*x)+(0.5.*sum(a.*x))^2+(0.5.*sum(a.*x))^4;
  
elseif F_index==12      %Cigar [-10,10]  f(0,0,0,...,0)=0
    s=sum(x(2:dim).*x(2:dim));
    fit=x(1).^2+100000*s;
    
elseif F_index==13      %brown3 [-1,4]  f(0,0,0.....,0)=0
   fit=sum(((x(1:dim-1).^2).^(x(2:dim).^2+ones(1,dim-1)))+((x(2:dim).^2).^(x(1:dim-1).^2+ones(1,dim-1))));
    
elseif F_index==14      %/Schewel prob 3
    fit=sum(abs(x)+prod(abs(x)));
    
elseif F_index==15      %Salomon Problem (SAL)
    fit=1-cos(2*pi.*(sqrt(sum(x.*x))))+(0.1).*sqrt(sum(x.*x));
    
elseif F_index==16      %Axis parallel hyperellipsoid
    a=[1:dim];
    fit=sum(a.*x.*x);
    
elseif F_index==17      %Pathological
    s1=(sin(sqrt(100.*(x(1:dim-1)).^2)+(x(2:dim)).^2).^2)-0.5;
    s2=1+0.001*((((x(1:dim-1)).^2)-2.*x(1:dim-1).*x(2:dim)+(x(2:dim)).^2.^2));
    fit=sum(0.5.*ones(1,dim)+(s1/s2));
    
    
elseif F_index==18      %Sum of different powers
    a=[1:dim];
    fit=sum(abs(x).^a);
    
elseif F_index==19      %step function [-100, 100] f(-0.5<=x<=0.5)=0
    fit=sum(floor(abs(x)));
    
elseif F_index==20      %Quartic function, i.e., noise [-1.28, 1.28] f(0000..00)=0
   a=[1:dim];
   fit=sum(a.*(x.^4))+rand;
    
elseif F_index==21      %Inverted cosine wave function (Masters) //Inverted cosine wave function (Masters) [-5, 5] f(000..0)=-D+1
    xi=x(1:dim-1);
    xip=x(2:dim);
    fit=(-1)*sum(exp((-1).*((xi.*xi)+(xip.*xip)+(0.5.*xi.*xip))/8).*cos(4.*sqrt((xi.*xi)+(xip.*xip)+(0.5.*xi.*xip))));
    
elseif F_index==22      %Neumaier 3 Problem (NF3) (Neumaier, 2003b)
    fit=sum((x-ones(1,dim)).^2)-sum(x(1:dim-1).*x(2:dim));
    
elseif F_index==23      %Rotated hyper-ellipsoid function
   for i=1:dim
       fit=sum(x(1:i).*x(1:i));
   end
    
elseif F_index==24      %Levi montalvo 1
    w=1+0.25.*(x-ones(1,dim));
    s=sum(((w(1:dim-1)-ones(1,dim-1)).^2).*(ones(1,dim-1)+10.*sin(pi.*w(1:dim-1)+ones(1,dim-1)).^2));
    fit=sin(pi*w(1))^2+s+((w(dim)-1)^2*(1+sin(2*pi*w(dim)^2)));
    
elseif F_index==25        %Levi montalvo 2 
    fit=0.1.*(sin(3*pi*x(1)).^2)+sum(((x(1:dim-1)-ones(1,dim-1)).^2).*(ones(1,dim-1)+sin(3*pi.*x(2:dim)).^2))+(((x(dim)-1).^2).*(1+sin(2*pi.*x(dim)).^2));

elseif F_index==26      %Ellipsoidal Ellipsoidal [-D,D] f(1,2,3,...,D)=0
   a=[1:dim];
   fit=sum((x-a).^2);
    
elseif F_index==27      %Beale function [-4.5,4.5] f(3, 0.5)=0
     fit=((1.5-x(1)+x(1)*x(2))^2+(2.25-x(1)+x(1)*x(2)^2)^2+(2.625-x(1)+x(1)*x(2)^3)^2);
    
elseif F_index==28      %Colville function [-10,10] f(1111)=0
     fit=100*((x(1))^2-x(2))^2+(x(1)-1)^2+(x(3)-1)^2+90*((x(3))^2-x(4))^2+10.1*((x(2)-1)^2+(x(4)-1)^2)+19.8*(x(2)-1)*(x(4)-1);   
    
elseif F_index==29      %Branins’s function [-5,10][0,15] f(-pi, 12.275)=0.3979
    a=1;
    b=5.1/(4*pi*pi);
    c=5/pi;
    d=6;
    e=10;
    fav=1/(8*pi);
    fit=a*((x(2)-b*x(1)*x(1)*x(1)+c*x(1)-d)^2)+e*(1-fav)*cos(x(1))+e;
    
elseif F_index==30      %Kowalik function [-5,5] f(0.192833, 0.190836, 0.123117, 0.135766)=0.000307486
   x1=x(1);
   x2=x(2);	
   x3=x(3);
   x4=x(4);
   a=[0.1957, 0.1947, 0.1735, 0.1600, 0.0844, 0.0627, 0.0456, 0.0342, 0.0323, 0.0235, 0.0246];
   b=[4.0, 2.0, 1.0, 0.5, 0.25, 0.1667, 0.125, 0.1, 0.0833, 0.07143, 0.0625];
   fit=sum(((a-x1.*(b.^2+b.*x2))/(b.^2+b.*x3+x4))^2);    
    
%%%%%%// Minibench Mark Problems: 4-Problem Taken from clerc website%%%%%%
    
elseif F_index==31      %2D Tripod function [-100,100] f(0, 50)=-50
    s11 = (1.0 - sign (x(1))) / 2;
    s12 = (1.0 + sign (x(1))) / 2;
    s21 = (1.0 - sign (x(2))) / 2;
    s22 = (1.0 + sign (x(2))) / 2;
    
    fit = s21 * (abs (x(1))) +abs(x(2)+50);
    fit = fit + s22 * (s11 * (1 + abs (x(1) + 50)) + abs( (x(2) - 50))  + s12 * (2 +abs (x(1) - 50)) + abs ((x(2) - 50)));
    
elseif F_index==32     %Shifted CEC 2005 Rosenbrock F6  [-100, 100], solution point is O + (1; : : : ; 1) where f = 390.
    o=[81.0232 -48.395 19.2316 -2.5231 70.4338 47.1774 -7.8358 -86.6693 57.8532 -9.9533];
    z=x-o+ones(1,dim);
    fit=sum(100.*(z(1:dim-1).^2-z(2:dim)).^2+(z(1:dim-1)-ones(1,dim-1)).^2)+390;
    
elseif F_index==33      %Shifted Parabola/Sphere (CEC 2005 benchmark)	x?[-100,100] , Global optimum: x* = offset  f(x) = f_bias = - 450
    offset=[-3.9311900e+001, 5.8899900e+001, -4.6322400e+001, -7.4651500e+001, -1.6799700e+001,
                   -8.0544100e+001, -1.0593500e+001, 2.4969400e+001, 8.9838400e+001, 9.1119000e+000, 
                   -1.0744300e+001, -2.7855800e+001, -1.2580600e+001, 7.5930000e+000, 7.4812700e+001,
                   6.8495900e+001, -5.3429300e+001, 7.8854400e+001, -6.8595700e+001, 6.3743200e+001, 
                   3.1347000e+001, -3.7501600e+001, 3.3892900e+001, -8.8804500e+001, -7.8771900e+001, 
                   -6.6494400e+001, 4.4197200e+001, 1.8383600e+001, 2.6521200e+001, 8.4472300e+001];
               
	z = x-offset(1:dim);
	fit = sum(z.^2)-450;  
	    
elseif F_index==34      %Shifted CEC 2005  Rastrigin  x?[-5,5] , Global optimum x* = offset , f(x*) = f_bias = - 330
    offset= [1.9005000e+000, -1.5644000e+000, -9.7880000e-001, -2.2536000e+000,  2.4990000e+000,
        -3.2853000e+000,  9.7590000e-001, -3.6661000e+000,  9.8500000e-002, -3.2465000e+000,
        3.8060000e+000, -2.6834000e+000, -1.3701000e+000,  4.1821000e+000,  2.4856000e+000,
        -4.2237000e+000,  3.3653000e+000,  2.1532000e+000, -3.0929000e+000,  4.3105000e+000,
        -2.9861000e+000,  3.4936000e+000, -2.7289000e+000, -4.1266000e+000, -2.5900000e+000,
        1.3124000e+000, -1.7990000e+000, -1.1890000e+000, -1.0530000e-001, -3.1074000e+000];
    z = x-offset(1:dim);
    fit=sum(z.^2-10.*(cos(2*pi.*z))+10)-330;
    
elseif F_index==35      %Shifted CEC 2005 Schwefel [-100,100], Global optimum x* = offset , f(x*) = f_bias = - 450
    offset=[
     3.5626700e+001, -8.2912300e+001, -1.0642300e+001, -8.3581500e+001,  8.3155200e+001,
              4.7048000e+001, -8.9435900e+001, -2.7421900e+001,  7.6144800e+001, -3.9059500e+001,
              4.8885700e+001, -3.9828000e+000, -7.1924300e+001,  6.4194700e+001, -4.7733800e+001,
              -5.9896000e+000 ,-2.6282800e+001, -5.9181100e+001,  1.4602800e+001, -8.5478000e+001,
              -5.0490100e+001,  9.2400000e-001,  3.2397800e+001,  3.0238800e+001, -8.5094900e+001,
              6.0119700e+001, -3.6218300e+001, -8.5883000e+000, -5.1971000e+000,  8.1553100e+001 ];
    z = x-offset(1:dim);
    for i=1:dim
       fit=sum(sum(z(1:i).^2))-450; 
    end
          
elseif F_index==36        %Shifted CEC 2005 Griewank. WARNING: in the CEC 2005 benchmark it is rotated
    offset=    [-2.7626840e+002, -1.1911000e+001, -5.7878840e+002, -2.8764860e+002, -8.4385800e+001,
         -2.2867530e+002, -4.5815160e+002, -2.0221450e+002, -1.0586420e+002, -9.6489800e+001,
         -3.9574680e+002, -5.7294980e+002, -2.7036410e+002, -5.6685430e+002, -1.5242040e+002,
         -5.8838190e+002, -2.8288920e+002, -4.8888650e+002, -3.4698170e+002, -4.5304470e+002,
         -5.0658570e+002, -4.7599870e+002, -3.6204920e+002, -2.3323670e+002, -4.9198640e+002,
         -5.4408980e+002, -7.3445600e+001, -5.2690110e+002, -5.0225610e+002, -5.3723530e+002 ];
    z = x-offset(1:dim);
    a=[1:dim];
    fit=sum((z.^2)/4000)-prod(cos(z/sqrt(a))+ones(dim,1))-180;
    
elseif F_index==37      %Shifted Ackley (CEC 2005) [-32,32], Global optimum x* = offset , f(x*) = f_bias = - 140
    offset=[
        -1.6823000e+001,  1.4976900e+001,  6.1690000e+000,  9.5566000e+000,  1.9541700e+001,
    -1.7190000e+001, -1.8824800e+001,  8.5110000e-001, -1.5116200e+001,  1.0793400e+001,
    7.4091000e+000,  8.6171000e+000, -1.6564100e+001, -6.6800000e+000,  1.4543300e+001,
    7.0454000e+000, -1.8621500e+001,  1.4556100e+001, -1.1594200e+001, -1.9153100e+001,
    -4.7372000e+000,  9.2590000e-001,  1.3241200e+001, -5.2947000e+000,  1.8416000e+000,
    4.5618000e+000, -1.8890500e+001,  9.8008000e+000, -1.5426500e+001,  1.2722000e+000];
    z = x-offset(1:dim);
    fit=(-20)*(exp(-0.2*(sqrt(1/dim).*sum(z.^2))))-exp((1/dim).*sum(cos(2*pi.*z)))+20+exp(1)-140;
    
% elseif F_index==38        %Compression spring % [1,...,70],[0.6,3],[0.207,0.5] f(7; 1:386599591; 0:292) = 2:6254214578.
%     fit=0;
%     temp1=1;
%     temp2=1;
%     aa=2.5;bb=5;zz=30;
%     for i=1:dim
%         
%         temp1=temp1*sin(x(i)-zz);
%         temp2=temp2*sin(bb*(x(i)-zz));
%         
%     end
%     temp1=temp1*aa;
%     fit=-(temp1+temp2);

elseif F_index==39       % Gear Train Problem
  fit=((1/6.931)-((x(1)*x(2))/(x(3)*x(4)))).^2; 

elseif F_index==40      %Goldstein-Price function  [-2,2] f(0, -1) = 3.
     fit=(1+((x(1)+x(2)+1).^2)*(19-14*x(1)+3*x(1).^2-14*x(2)+6*x(1)*x(2)+3*x(2).^2)).* ((30+(2*x(1)-3*x(2)).^2).*(18-32*x(1)+12*x(1).^2+48*x(2)-36*x(1)*x(2)+27*x(2).^2)); 

elseif F_index==41    %Six-hump camel back function  [-5 < x < 5]
     fit=(4-2.1*(x(1).^2)+(x(1).^4)/3)*(x(1).^2)+x(1)*x(2)+((4*x(2).^2-4)*(x(2).^2));

elseif F_index==42      %Easom's function  -10<=x(i)<=10, i=1:2. f(x1,x2)=-1; (x1,x2)=(pi,pi).
    fit=-cos(x(1))*cos(x(2))*exp(-(x(1)-pi).^2-(x(2)-pi).^2);
    
elseif F_index==43      %Dekkers and Aarts Problem (DA)  -20<=x(i)<=20, i=1:2. f(0,15),f(0,-15)=-24777; 
    fit=100000*x(1).^2*x(2).^2-((x(1).^2+x(2).^2).^2)+(10.^(-5))*((x(1).^2+x(2).^2).^4);

elseif F_index==44      %Hosaki Problem (HSK)   0<=x1<=5, 0<=x2<=6,f(4,2)=-2.3458;
    fit=(1-8*x(1)+7*(x(1).^2)-7/3*x(1).^3+1/4*x(1).^4)*(x(2).^2)*exp(-x(2));

elseif F_index==45      %McCormick Problem (MC)   -1.5<=x1<=4, -3<=x2<=3,f(4,2)=-2.3458; 
    fit=sin(x(1)+x(2))+(x(1)-x(2)).^2-(3/2)*x(1)+(5/2)*x(2)+1;
  
elseif F_index==46      %Meyer and Roth Problem (MR) (Wolfe, 1978)  -10<=x<=10, f(ð3.13; 15.16; 0.78)=0.4*10^(-4);    
    t=[1.0, 2.0, 1.0, 2.0, 0.1];
    v=[1.0, 1.0, 2.0, 2.0, 0.0];  
    y=[0.126, 0.219, 0.076, 0.126, 0.186];
    fit=sum((((x(1).*x(3).*t)/(ones(1,5)+x(1).*t+x(2).*v))-y).^2);

elseif F_index==47      %Shubert Problem (SBT)  -10<=x<=10, f((7.0835, 4.8580)=-186.7309;
    a=[1:dim];
    fit=(sum(a.*cos((a+1).*x(1)+a))).*(sum(a.*cos((a+1).*x(1)+a)));
    
%elseif F_index==48      %Sinusoidal Problem (SIN) 0<=x<=180, A= 2.5; B =5; z = 30. f(90 + z; 90 + z; . . . ; 90 + z)= -(A+1)
elseif F_index==49      % Moved axis parallel hyper-ellipsoid function [-5.12, 5.12] f(x)=0; x(i)= 5*i, i=1:D.
    a=[1:dim];
    fit=sum(5*a.*x.^2);
    
elseif F_index==50      % Pressure vessel (confinement method) 	// (1.125, 0.625, 55.8592, 57.7315) => 7197.729
			% If no granularity => min = 6059.7143
			% We are using function without granularity 
   
    fit=0.6224*(x(1).*x(3).*x(4)) + 1.7781*(x(2).*x(3).*x(3)) + 3.1611*(x(1).*x(1).*x(4)) + 19.84.*x(1).*x(1).*x(3);
    ff1=0.0193*x(3)-x(1);
		ff2=0.00954*x(3)-x(2);
		ff3=750*1728-pi*x(3)*x(3)*(x(4)+(4.0/3)*x(3)); 
		
		if (ff1>0) 
            c= 1+10^10*ff1;  fit=fit*c*c; 
        end
		if (ff2>0) 
            c=1+ff2; fit=fit*c*c;  
        end
		if (ff3>0) 
            c=1+ff3; fit=fit*c*c;  
        end
% elseif F_index==51      %lennard_jones (-2,2) for 5 atoms => -9.103852
% elseif F_index==52      %Parameter Estimation for Frequency-Modulated (FM) Sound Waves f(x)=0;
    
elseif F_index==53      %temp
    fit=x(1)*x(1)+x(2)*x(2);
end
 
